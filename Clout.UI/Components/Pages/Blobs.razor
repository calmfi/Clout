@page "/"
@page "/blobs"
@rendermode InteractiveServer

<h1>Blobs</h1>

<FluentStack Orientation="Orientation.Horizontal" Spacing="8" AlignItems="Alignment.Center">
    <FluentButton Appearance="Appearance.Accent" OnClick="LoadAsync">Refresh</FluentButton>
    @if (_loading)
    {
        <FluentProgressRing />
    }
    @if (!string.IsNullOrEmpty(_error))
    {
        <span style="color:var(--neutral-foreground-rest)">Error: @_error</span>
    }
    <span>@(_blobs.Count) items</span>
    <FluentSearch OnSearch="OnSearch" Placeholder="Filter by file name or id" />
    @if (!string.IsNullOrWhiteSpace(_query))
    {
        <FluentButton Appearance="Appearance.Stealth" OnClick="ClearFilter">Clear Filter</FluentButton>
    }
    <FluentDivider />
</FluentStack>

<FluentDataGrid TGridItem="BlobRow" Items="@_view.AsQueryable()" RowsPerPage="20" GridHeight="600px" Density="Density.Compact">
    <PropertyColumn Property="@(r => r.FileName)" Title="File Name" Sortable="true" />
    <PropertyColumn Property="@(r => r.SizeDisplay)" Title="Size" />
    <PropertyColumn Property="@(r => r.ContentType)" Title="Content Type" />
    <PropertyColumn Property="@(r => r.CreatedDisplay)" Title="Created (UTC)" />
    <PropertyColumn Property="@(r => r.MetadataCount)" Title="Metadata" />
    <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
    <TemplateColumn>
        <ChildContent Context="r">
            <a href="@($"{Config.ApiBase}/api/blobs/{r.Id}")">Download</a>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn>
        <ChildContent Context="r">
            <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => DeleteAsync(r.Id))">Delete</FluentButton>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn>
        <ChildContent Context="r">
            <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => ShowMetadataAsync(r.Id))">Metadata</FluentButton>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn>
        <ChildContent Context="r">
            @if (!string.IsNullOrWhiteSpace(r.FileName) && r.FileName.EndsWith(".dll", StringComparison.OrdinalIgnoreCase))
            {
                <a href="/functions?from=@r.Id">Register Functions</a>
            }
        </ChildContent>
    </TemplateColumn>
</FluentDataGrid>

@if (_toastVisible)
{
    <div style="position:fixed; right:16px; bottom:16px; z-index:1100; background:var(--accent-fill-rest); color:var(--foreground-on-accent-rest); padding:10px 14px; border-radius:8px; box-shadow:0 6px 24px rgba(0,0,0,.24);">
        @_toastMessage
    </div>
}

@if (_metaOpen)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,0.4);z-index:1000;display:flex;align-items:center;justify-content:center;"
         @onclick="CloseMetadata" tabindex="0" autofocus @onkeydown="HandleKeyDown">
        <fluent-dialog aria-label="Blob metadata" style="max-width:min(95vw, 1000px); width:min(95vw, 1000px);"
                       @onclick:stopPropagation>
            <div style="display:flex; align-items:center; justify-content:space-between; gap:12px;">
                <h2 style="margin:0; font-size:1.1rem;">@_metaTitle</h2>
                <div style="display:flex; gap:8px;">
                    @if (!_metaEdit)
                    {
                        <FluentButton Appearance="Appearance.Accent" OnClick="BeginEdit">Edit</FluentButton>
                    }
                    else
                    {
                        <FluentButton Appearance="Appearance.Accent" OnClick="AddMetaRow">Add Row</FluentButton>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SaveEditAsync">Save</FluentButton>
                        <FluentButton Appearance="Appearance.Stealth" OnClick="CancelEdit">Cancel</FluentButton>
                    }
                    <FluentButton Appearance="Appearance.Stealth" OnClick="CloseMetadata">Close</FluentButton>
                </div>
            </div>
            <div style="margin-top:8px">
                @if (!_metaEdit)
                {
                    <FluentDataGrid TGridItem="BlobMetadata" Items="@_meta.AsQueryable()" RowsPerPage="10" GridHeight="60vh" Density="Density.Compact">
                        <PropertyColumn Property="@(m => m.Name)" Title="Name" Sortable="true" />
                        <PropertyColumn Property="@(m => m.ContentType)" Title="Content Type" />
                        <PropertyColumn Property="@(m => m.Value)" Title="Value" />
                        <TemplateColumn Title="Copy">
                            <ChildContent Context="m">
                                <FluentButton Appearance="Appearance.Stealth" Title="Copy value" OnClick="@(() => CopyToClipboard(m.Value))">Copy</FluentButton>
                            </ChildContent>
                        </TemplateColumn>
                    </FluentDataGrid>
                }
                else
                {
                    <FluentDataGrid TGridItem="EditMetaRow" Items="@_metaEditList.AsQueryable()" RowsPerPage="10" GridHeight="60vh" Density="Density.Compact">
                        <PropertyColumn Property="@(m => m.Name)" Title="Name" />
                        <PropertyColumn Property="@(m => m.ContentType)" Title="Content Type" />
                        <TemplateColumn Title="Value">
                            <ChildContent Context="m">
                                <FluentTextField Style="width:100%" @bind-Value="m.Value" />
                            </ChildContent>
                        </TemplateColumn>
                        <TemplateColumn Title="Remove">
                            <ChildContent Context="m">
                                <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => RemoveMetaRow(m))" Title="Remove row">Remove</FluentButton>
                            </ChildContent>
                        </TemplateColumn>
                    </FluentDataGrid>
                }
            </div>
        </fluent-dialog>
    </div>
}

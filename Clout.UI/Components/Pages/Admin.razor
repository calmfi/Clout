@page "/"
@using Cloud.Shared
@inject Services.ICloutApiClient Api
@inject Services.ApiConfig ApiCfg
@inject Clout.UI.Services.ToastService Toasts

<h2 class="text-2xl font-semibold mb-4 text-white">Admin</h2>

<h3 class="text-lg font-semibold mb-2 text-white/90">Blobs</h3>
@if (_loadingBlobs)
{
    <p class="text-gray-400">Loading blobs…</p>
}
else if (!string.IsNullOrEmpty(_errorBlobs))
{
    <p class="text-red-400">@_errorBlobs</p>
}
else
{
    <div class="overflow-x-auto rounded-lg shadow ring-1 ring-black/5">
    <table class="min-w-full divide-y divide-gray-700">
        <thead class="bg-gray-800/50">
            <tr class="text-left text-xs font-semibold uppercase tracking-wide text-gray-400">
                <th class="px-3 py-2">Id</th>
                <th class="px-3 py-2">Name</th>
                <th class="px-3 py-2">Size</th>
                <th class="px-3 py-2">ContentType</th>
                <th class="px-3 py-2">Created (UTC)</th>
                <th class="px-3 py-2">Actions</th>
            </tr>
        </thead>
        <tbody class="divide-y divide-gray-800 bg-gray-900/30">
        @foreach (var b in _blobs)
        {
            <tr class="text-sm text-gray-200">
                <td class="px-3 py-2 font-mono text-xs">@b.Id</td>
                <td class="px-3 py-2">@b.FileName</td>
                <td class="px-3 py-2">@b.Size</td>
                <td class="px-3 py-2">@b.ContentType</td>
                <td class="px-3 py-2">@b.CreatedUtc.UtcDateTime</td>
                <td class="px-3 py-2">
                    <a class="text-brand hover:text-brand-700" href="@($"{ApiCfg.BaseUrl}/api/blobs/{b.Id}")">Download</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </div>
}

<h3 class="text-lg font-semibold mt-6 mb-2 text-white/90">Functions</h3>
@if (_loadingFunctions)
{
    <p class="text-gray-400">Loading functions…</p>
}
else if (!string.IsNullOrEmpty(_errorFunctions))
{
    <p class="text-red-400">@_errorFunctions</p>
}
else
{
    <div class="overflow-x-auto rounded-lg shadow ring-1 ring-black/5">
    <table class="min-w-full divide-y divide-gray-700">
        <thead class="bg-gray-800/50">
            <tr class="text-left text-xs font-semibold uppercase tracking-wide text-gray-400">
                <th class="px-3 py-2">Blob Id</th>
                <th class="px-3 py-2">Entrypoint</th>
                <th class="px-3 py-2">Name</th>
                <th class="px-3 py-2">Runtime</th>
                <th class="px-3 py-2">Schedule</th>
                <th class="px-3 py-2">Set/Clear</th>
            </tr>
        </thead>
        <tbody class="divide-y divide-gray-800 bg-gray-900/30">
        @foreach (var f in _functions)
        {
            var name = f.Metadata.FirstOrDefault(m => m.Name == "function.name")?.Value;
            var runtime = f.Metadata.FirstOrDefault(m => m.Name == "function.runtime")?.Value;
            var entry = f.Metadata.FirstOrDefault(m => m.Name == "function.entrypoint")?.Value;
            var schedule = f.Metadata.FirstOrDefault(m => m.Name == "TimerTrigger")?.Value;
            <tr class="text-sm text-gray-200">
                <td class="px-3 py-2 font-mono text-xs">@f.Id</td>
                <td class="px-3 py-2">@entry</td>
                <td class="px-3 py-2">@name</td>
                <td class="px-3 py-2">@runtime</td>
                <td class="px-3 py-2">@schedule</td>
                <td class="px-3 py-2">
                    <input class="border border-gray-600 bg-transparent rounded px-2 py-1 text-sm w-40 focus:outline-none focus:ring-2 focus:ring-brand"
                           @bind="_scheduleInputs[f.Id]" @bind:event="oninput" placeholder="* * * * *" />
                    @if (_scheduleErrors.TryGetValue(f.Id, out var err) && !string.IsNullOrWhiteSpace(err))
                    {
                        <div class="text-red-400 text-xs mt-1">@err</div>
                    }
                    <div class="mt-2 space-x-2">
                        <button class="px-3 py-1 rounded bg-brand text-white hover:bg-brand-700 disabled:opacity-50"
                                disabled="@_busy || !IsCronValid(_scheduleInputs.GetValueOrDefault(f.Id))"
                                title="@(IsCronValid(_scheduleInputs.GetValueOrDefault(f.Id)) ? string.Empty : "Enter 5 or 6-field NCRONTAB")"
                                @onclick="() => OnSetScheduleAsync(f.Id)">Set</button>
                        <button class="px-3 py-1 rounded bg-gray-700 text-white hover:bg-gray-600 disabled:opacity-50"
                                disabled="@_busy || string.IsNullOrEmpty(schedule)" @onclick="() => OnClearScheduleAsync(f.Id)">Clear</button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </div>
}

@code {
    private List<BlobInfo> _blobs = new();
    private List<BlobInfo> _functions = new();
    private bool _loadingBlobs;
    private bool _loadingFunctions;
    private string? _errorBlobs;
    private string? _errorFunctions;
    private readonly Dictionary<string, string> _scheduleInputs = new();
    private readonly Dictionary<string, string> _scheduleErrors = new();
    private bool _busy;

    protected override async Task OnInitializedAsync()
    {
        // Load blobs and functions in parallel
        _loadingBlobs = true;
        _loadingFunctions = true;
        var ct = default(CancellationToken);
        try
        {
            var blobsTask = Api.GetBlobsAsync(ct);
            var funcsTask = Api.GetFunctionsAsync(ct);
            await Task.WhenAll(blobsTask, funcsTask);
            _blobs = blobsTask.Result.ToList();
            _functions = funcsTask.Result.ToList();
            foreach (var f in _functions)
            {
                var schedule = f.Metadata.FirstOrDefault(m => m.Name == "TimerTrigger")?.Value ?? string.Empty;
                _scheduleInputs[f.Id] = schedule;
            }
        }
        catch (Exception ex)
        {
            _errorBlobs = ex.Message;
            _errorFunctions = ex.Message;
        }
        finally
        {
            _loadingBlobs = false;
            _loadingFunctions = false;
        }
    }

    private async Task OnSetScheduleAsync(string id)
    {
        if (!_scheduleInputs.TryGetValue(id, out var expr) || string.IsNullOrWhiteSpace(expr))
            return;

        if (!IsCronValid(expr, out var error))
        {
            _scheduleErrors[id] = error ?? "Invalid expression";
            Toasts.Show(_scheduleErrors[id], Services.ToastLevel.Error);
            return;
        }
        _scheduleErrors.Remove(id);
        _busy = true;
        try
        {
            await Api.SetFunctionScheduleAsync(id, expr);
            await RefreshFunctionsAsync();
            Toasts.Show("Schedule updated", Services.ToastLevel.Success);
        }
        catch (Exception ex)
        {
            _errorFunctions = ex.Message;
            Toasts.Show(ex.Message, Services.ToastLevel.Error, 5000);
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task OnClearScheduleAsync(string id)
    {
        _busy = true;
        try
        {
            await Api.ClearFunctionScheduleAsync(id);
            await RefreshFunctionsAsync();
            Toasts.Show("Schedule cleared", Services.ToastLevel.Success);
        }
        catch (Exception ex)
        {
            _errorFunctions = ex.Message;
            Toasts.Show(ex.Message, Services.ToastLevel.Error, 5000);
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task RefreshFunctionsAsync()
    {
        var list = await Api.GetFunctionsAsync();
        _functions = list.ToList();
        foreach (var f in _functions)
        {
            var schedule = f.Metadata.FirstOrDefault(m => m.Name == "TimerTrigger")?.Value ?? string.Empty;
            _scheduleInputs[f.Id] = schedule;
        }
        StateHasChanged();
    }

    private static bool IsCronValid(string? expr) => IsCronValid(expr, out _);

    private static bool IsCronValid(string? expr, out string? error)
    {
        error = null;
        if (string.IsNullOrWhiteSpace(expr)) { error = "Empty expression"; return false; }
        var parts = expr.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length is not (5 or 6)) { error = "Use 5 or 6 fields"; return false; }
        foreach (var p in parts)
        {
            if (string.IsNullOrWhiteSpace(p)) { error = "Empty field"; return false; }
            foreach (var ch in p)
            {
                if (!(char.IsDigit(ch) || ch is '*' or '/' or '-' or ',' or '?'))
                {
                    error = $"Invalid char '{ch}'";
                    return false;
                }
            }
        }
        return true;
    }
}

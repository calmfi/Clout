@page "/functions"
@rendermode InteractiveServer

<h1>Registered Functions</h1>

<FluentStack Orientation="Orientation.Horizontal" Spacing="8" AlignItems="Alignment.Center">
    <FluentButton Appearance="Appearance.Accent" OnClick="LoadAsync">Refresh</FluentButton>
    <FluentButton Appearance="Appearance.Accent" OnClick="OpenRegisterManyDialog">Register Many</FluentButton>
    @if (_loading)
    {
        <FluentProgressRing />
    }
    @if (!string.IsNullOrEmpty(_error))
    {
        <span style="color:var(--neutral-foreground-rest)">Error: @_error</span>
    }
    <span>@(_functions.Count) items</span>
    <FluentSearch OnSearch="OnSearch" Placeholder="Filter by function or id" />
    @if (!string.IsNullOrWhiteSpace(_query))
    {
        <FluentButton Appearance="Appearance.Stealth" OnClick="ClearFilter">Clear Filter</FluentButton>
    }
    <FluentDivider />
</FluentStack>

<FluentDataGrid TGridItem="FunctionRow" Items="@_view.AsQueryable()" RowsPerPage="20" GridHeight="600px" Density="Density.Compact">
    <PropertyColumn Property="@(r => r.Name)" Title="Name" Sortable="true" />
    <PropertyColumn Property="@(r => r.Runtime)" Title="Runtime" />
    <PropertyColumn Property="@(r => r.Entrypoint)" Title="Entrypoint" />
    <PropertyColumn Property="@(r => r.DeclaringType)" Title="Declaring Type" />
    <PropertyColumn Property="@(r => r.Verified)" Title="Verified" />
    <PropertyColumn Property="@(r => r.TimerTrigger)" Title="TimerTrigger" />
    <TemplateColumn Title="Source DLL">
        <ChildContent Context="r">
            @if (!string.IsNullOrWhiteSpace(r.SourceId))
            {
                <a href="@($"{Config.ApiBase}/api/blobs/{r.SourceId}")">@r.SourceId</a>
            }
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(r => r.CreatedDisplay)" Title="Created (UTC)" />
    <PropertyColumn Property="@(r => r.Id)" Title="Blob Id" />
    <TemplateColumn>
        <ChildContent Context="r">
            <a href="@($"{Config.ApiBase}/api/blobs/{(string.IsNullOrWhiteSpace(r.SourceId) ? r.Id : r.SourceId)}")">Download</a>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn>
        <ChildContent Context="r">
            <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => OpenScheduleDialog(r))">@(string.IsNullOrEmpty(r.TimerTrigger) ? "Schedule" : "Reschedule")</FluentButton>
            @if (!string.IsNullOrEmpty(r.TimerTrigger))
            {
                <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => UnscheduleAsync(r))">Unschedule</FluentButton>
            }
            <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => DeleteAsync(r.Id))">Delete</FluentButton>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn>
        <ChildContent Context="r">
            @if (!string.IsNullOrWhiteSpace(r.SourceId))
            {
                <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => OpenRescheduleAllDialog(r.SourceId!, r.Name))">Reschedule All</FluentButton>
                <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => UnscheduleAllAsync(r.SourceId!))">Unschedule All</FluentButton>
            }
        </ChildContent>
    </TemplateColumn>
</FluentDataGrid>

@if (_schedOpen)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,0.4);z-index:1000;display:flex;align-items:center;justify-content:center;"
         @onclick="CloseScheduleDialog" tabindex="0" autofocus @onkeydown="HandleScheduleKeyDown">
        <fluent-dialog aria-label="Schedule function" style="max-width:min(95vw, 700px); width:min(95vw, 700px);"
                       @onclick:stopPropagation>
            <div style="display:flex; align-items:center; justify-content:space-between; gap:12px;">
                <h2 style="margin:0; font-size:1.1rem;">Schedule: @_schedName (@_schedId)</h2>
                <FluentButton Appearance="Appearance.Stealth" OnClick="CloseScheduleDialog">Close</FluentButton>
            </div>
            <div style="margin-top:8px; display:flex; gap:8px; align-items:center;">
                <label for="cron" style="min-width:7ch;">Cron</label>
                <FluentTextField Id="cron" Placeholder="* * * * * or with seconds" Style="flex:1" @bind-Value="_schedCron" />
                <FluentButton Appearance="Appearance.Accent" OnClick="SaveScheduleAsync">Save</FluentButton>
            </div>
            @if (!string.IsNullOrWhiteSpace(_schedError))
            {
                <div style="margin-top:8px;color:var(--neutral-foreground-rest);">Error: @_schedError</div>
            }
            <div style="margin-top:8px; color:var(--neutral-foreground-rest); font-size:.9em;">
                Supports 5-field or 6-field NCRONTAB expressions. Example with seconds: <code>0 */5 * * * *</code>
            </div>
        </fluent-dialog>
    </div>
}

@if (_reAllOpen)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,0.4);z-index:1000;display:flex;align-items:center;justify-content:center;"
         @onclick="CloseRescheduleAllDialog" tabindex="0" autofocus @onkeydown="HandleRescheduleAllKeyDown">
        <fluent-dialog aria-label="Reschedule all" style="max-width:min(95vw, 700px); width:min(95vw, 700px);" @onclick:stopPropagation>
            <div style="display:flex; align-items:center; justify-content:space-between; gap:12px;">
                <h2 style="margin:0; font-size:1.1rem;">Reschedule All for DLL @_reAllSourceId</h2>
                <FluentButton Appearance="Appearance.Stealth" OnClick="CloseRescheduleAllDialog">Close</FluentButton>
            </div>
            <div style="margin-top:8px; display:flex; gap:8px; align-items:center;">
                <label for="cron3" style="min-width:7ch;">Cron</label>
                <FluentTextField Id="cron3" Placeholder="* * * * * or with seconds" Style="flex:1" @bind-Value="_reAllCron" />
                <FluentButton Appearance="Appearance.Accent" OnClick="SaveRescheduleAllAsync">Save</FluentButton>
            </div>
            @if (!string.IsNullOrWhiteSpace(_reAllError))
            {
                <div style="margin-top:8px;color:var(--neutral-foreground-rest);">Error: @_reAllError</div>
            }
        </fluent-dialog>
    </div>
}

@if (_regOpen)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,0.4);z-index:1000;display:flex;align-items:center;justify-content:center;"
         @onclick="CloseRegisterManyDialog" tabindex="0" autofocus @onkeydown="HandleRegisterKeyDown">
        <fluent-dialog aria-label="Register functions" style="max-width:min(95vw, 900px); width:min(95vw, 900px);"
                       @onclick:stopPropagation>
            <div style="display:flex; align-items:center; justify-content:space-between; gap:12px;">
                <h2 style="margin:0; font-size:1.1rem;">Register Multiple Functions</h2>
                <FluentButton Appearance="Appearance.Stealth" OnClick="CloseRegisterManyDialog">Close</FluentButton>
            </div>
            <div style="margin-top:8px; display:grid; grid-template-columns: 120px 1fr; gap:10px; align-items:center;">
                <div>DLL Source</div>
                <div style="display:flex; gap:8px; align-items:center; flex-wrap:wrap;">
                    <InputFile OnChange="OnDllSelected" />
                    <span>or existing Blob Id:</span>
                    <FluentTextField Style="width:320px" @bind-Value="_regExistingId" />
                </div>
                <div>Names</div>
                <div>
                    <textarea style="width:100%; min-height:120px;" @bind="_regNames" placeholder="One per line or comma-separated"></textarea>
                    <div style="margin-top:6px; display:flex; gap:8px; align-items:center;">
                        <FluentButton Appearance="Appearance.Stealth" OnClick="SyncRowsFromNames">Sync rows from names</FluentButton>
                        <FluentSwitch @bind-Checked="_perRow">Per-function cron</FluentSwitch>
                    </div>
                </div>
                @if (_perRow)
                {
                    <div>Per-function schedule</div>
                    <div>
                        <FluentDataGrid TGridItem="Functions.FuncRow" Items="@_rows.AsQueryable()" RowsPerPage="10" GridHeight="40vh" Density="Density.Compact">
                            <PropertyColumn Property="@(r => r.Name)" Title="Name" />
                            <TemplateColumn Title="Cron">
                                <ChildContent Context="r">
                                    <div style="display:flex; gap:8px; align-items:center;">
                                        <FluentTextField Style="flex:1" @bind-Value="r.Cron" />
                                        @if (string.IsNullOrWhiteSpace(r.Cron))
                                        {
                                            <span style="color:var(--neutral-foreground-rest); font-size:.85em;">optional</span>
                                        }
                                        else if (BlobApiClient.IsValidCron(r.Cron))
                                        {
                                            <span style="color:#0b6; font-size:.85em;">valid</span>
                                        }
                                        else
                                        {
                                            <span style="color:#c33; font-size:.85em;">invalid</span>
                                        }
                                    </div>
                                </ChildContent>
                            </TemplateColumn>
                            <TemplateColumn Title="">
                                <ChildContent Context="r"><FluentButton Appearance="Appearance.Stealth" OnClick="@(() => RemoveFuncRow(r))">Remove</FluentButton></ChildContent>
                            </TemplateColumn>
                        </FluentDataGrid>
                        <div style="margin-top:6px;"><FluentButton Appearance="Appearance.Stealth" OnClick="AddFuncRow">Add Row</FluentButton></div>
                    </div>
                }
                else
                {
                    <div>Cron (optional)</div>
                    <div style="display:flex; gap:8px; align-items:center;">
                        <FluentTextField @bind-Value="_regCron" @oninput="(e => ComputeCronPreview())" Placeholder="e.g. */5 * * * *" Style="flex:1" />
                        <FluentButton Appearance="Appearance.Stealth" OnClick="ComputeCronPreview">Preview</FluentButton>
                    </div>
                    @if (_cronPreview.Count > 0)
                    {
                        <div></div>
                        <div style="font-size:.9em; color:var(--neutral-foreground-rest);">
                            Next runs:
                            <ul style="margin:6px 0 0 18px;">
                                @foreach (var t in _cronPreview) { <li>@t</li> }
                            </ul>
                        </div>
                    }
                }
                @if (_cronPreview.Count > 0)
                {
                    <div></div>
                    <div style="font-size:.9em; color:var(--neutral-foreground-rest);">
                        Next runs:
                        <ul style="margin:6px 0 0 18px;">
                            @foreach (var t in _cronPreview) { <li>@t</li> }
                        </ul>
                    </div>
                }
                <div>Runtime</div>
                <FluentTextField @bind-Value="_regRuntime" />
                <div></div>
                <div style="display:flex; gap:8px; align-items:center;">
                    <FluentButton Appearance="Appearance.Accent" OnClick="SaveRegisterManyAsync">Register</FluentButton>
                    <FluentButton Appearance="Appearance.Stealth" OnClick="CloseRegisterManyDialog">Cancel</FluentButton>
                </div>
            </div>
            @if (!string.IsNullOrWhiteSpace(_regError))
            {
                <div style="margin-top:8px;color:var(--neutral-foreground-rest);">Error: @_regError</div>
            }
        </fluent-dialog>
    </div>
}

@if (_toastVisible)
{
    <div style="position:fixed; right:16px; bottom:16px; z-index:1100; background:var(--accent-fill-rest); color:var(--foreground-on-accent-rest); padding:10px 14px; border-radius:8px; box-shadow:0 6px 24px rgba(0,0,0,.24);">
        @_toastMessage
    </div>
}

@code {

    // Toast notifications

    // Schedule dialog state and actions

    // Register many dialog state and actions

    // Reschedule all dialog

}




